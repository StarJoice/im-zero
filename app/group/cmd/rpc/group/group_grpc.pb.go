// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: pb/group.proto

package group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Group_CreateGroup_FullMethodName      = "/group.Group/CreateGroup"
	Group_GetGroupInfo_FullMethodName     = "/group.Group/GetGroupInfo"
	Group_UpdateGroup_FullMethodName      = "/group.Group/UpdateGroup"
	Group_DissolveGroup_FullMethodName    = "/group.Group/DissolveGroup"
	Group_InviteUsers_FullMethodName      = "/group.Group/InviteUsers"
	Group_RemoveMembers_FullMethodName    = "/group.Group/RemoveMembers"
	Group_LeaveGroup_FullMethodName       = "/group.Group/LeaveGroup"
	Group_GetGroupMembers_FullMethodName  = "/group.Group/GetGroupMembers"
	Group_SetMemberRole_FullMethodName    = "/group.Group/SetMemberRole"
	Group_MuteMembers_FullMethodName      = "/group.Group/MuteMembers"
	Group_GetUserGroups_FullMethodName    = "/group.Group/GetUserGroups"
	Group_CheckMembership_FullMethodName  = "/group.Group/CheckMembership"
	Group_SendGroupMessage_FullMethodName = "/group.Group/SendGroupMessage"
	Group_GetGroupHistory_FullMethodName  = "/group.Group/GetGroupHistory"
)

// GroupClient is the client API for Group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 群组服务定义
type GroupClient interface {
	// 创建群组
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	// 获取群组信息
	GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error)
	// 更新群组信息
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
	// 解散群组
	DissolveGroup(ctx context.Context, in *DissolveGroupReq, opts ...grpc.CallOption) (*DissolveGroupResp, error)
	// 邀请用户入群
	InviteUsers(ctx context.Context, in *InviteUsersReq, opts ...grpc.CallOption) (*InviteUsersResp, error)
	// 移除群成员
	RemoveMembers(ctx context.Context, in *RemoveMembersReq, opts ...grpc.CallOption) (*RemoveMembersResp, error)
	// 退出群组
	LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupResp, error)
	// 获取群成员列表
	GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error)
	// 设置成员角色
	SetMemberRole(ctx context.Context, in *SetMemberRoleReq, opts ...grpc.CallOption) (*SetMemberRoleResp, error)
	// 禁言成员
	MuteMembers(ctx context.Context, in *MuteMembersReq, opts ...grpc.CallOption) (*MuteMembersResp, error)
	// 获取用户的群组列表
	GetUserGroups(ctx context.Context, in *GetUserGroupsReq, opts ...grpc.CallOption) (*GetUserGroupsResp, error)
	// 检查用户是否在群中
	CheckMembership(ctx context.Context, in *CheckMembershipReq, opts ...grpc.CallOption) (*CheckMembershipResp, error)
	// 发送群消息
	SendGroupMessage(ctx context.Context, in *SendGroupMessageReq, opts ...grpc.CallOption) (*SendGroupMessageResp, error)
	// 获取群聊记录
	GetGroupHistory(ctx context.Context, in *GetGroupHistoryReq, opts ...grpc.CallOption) (*GetGroupHistoryResp, error)
}

type groupClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClient(cc grpc.ClientConnInterface) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, Group_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupInfoResp)
	err := c.cc.Invoke(ctx, Group_GetGroupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGroupResp)
	err := c.cc.Invoke(ctx, Group_UpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DissolveGroup(ctx context.Context, in *DissolveGroupReq, opts ...grpc.CallOption) (*DissolveGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DissolveGroupResp)
	err := c.cc.Invoke(ctx, Group_DissolveGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) InviteUsers(ctx context.Context, in *InviteUsersReq, opts ...grpc.CallOption) (*InviteUsersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteUsersResp)
	err := c.cc.Invoke(ctx, Group_InviteUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) RemoveMembers(ctx context.Context, in *RemoveMembersReq, opts ...grpc.CallOption) (*RemoveMembersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMembersResp)
	err := c.cc.Invoke(ctx, Group_RemoveMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveGroupResp)
	err := c.cc.Invoke(ctx, Group_LeaveGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupMembersResp)
	err := c.cc.Invoke(ctx, Group_GetGroupMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetMemberRole(ctx context.Context, in *SetMemberRoleReq, opts ...grpc.CallOption) (*SetMemberRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMemberRoleResp)
	err := c.cc.Invoke(ctx, Group_SetMemberRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MuteMembers(ctx context.Context, in *MuteMembersReq, opts ...grpc.CallOption) (*MuteMembersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MuteMembersResp)
	err := c.cc.Invoke(ctx, Group_MuteMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetUserGroups(ctx context.Context, in *GetUserGroupsReq, opts ...grpc.CallOption) (*GetUserGroupsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserGroupsResp)
	err := c.cc.Invoke(ctx, Group_GetUserGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CheckMembership(ctx context.Context, in *CheckMembershipReq, opts ...grpc.CallOption) (*CheckMembershipResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckMembershipResp)
	err := c.cc.Invoke(ctx, Group_CheckMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SendGroupMessage(ctx context.Context, in *SendGroupMessageReq, opts ...grpc.CallOption) (*SendGroupMessageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendGroupMessageResp)
	err := c.cc.Invoke(ctx, Group_SendGroupMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupHistory(ctx context.Context, in *GetGroupHistoryReq, opts ...grpc.CallOption) (*GetGroupHistoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupHistoryResp)
	err := c.cc.Invoke(ctx, Group_GetGroupHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServer is the server API for Group service.
// All implementations must embed UnimplementedGroupServer
// for forward compatibility
//
// 群组服务定义
type GroupServer interface {
	// 创建群组
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	// 获取群组信息
	GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoResp, error)
	// 更新群组信息
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error)
	// 解散群组
	DissolveGroup(context.Context, *DissolveGroupReq) (*DissolveGroupResp, error)
	// 邀请用户入群
	InviteUsers(context.Context, *InviteUsersReq) (*InviteUsersResp, error)
	// 移除群成员
	RemoveMembers(context.Context, *RemoveMembersReq) (*RemoveMembersResp, error)
	// 退出群组
	LeaveGroup(context.Context, *LeaveGroupReq) (*LeaveGroupResp, error)
	// 获取群成员列表
	GetGroupMembers(context.Context, *GetGroupMembersReq) (*GetGroupMembersResp, error)
	// 设置成员角色
	SetMemberRole(context.Context, *SetMemberRoleReq) (*SetMemberRoleResp, error)
	// 禁言成员
	MuteMembers(context.Context, *MuteMembersReq) (*MuteMembersResp, error)
	// 获取用户的群组列表
	GetUserGroups(context.Context, *GetUserGroupsReq) (*GetUserGroupsResp, error)
	// 检查用户是否在群中
	CheckMembership(context.Context, *CheckMembershipReq) (*CheckMembershipResp, error)
	// 发送群消息
	SendGroupMessage(context.Context, *SendGroupMessageReq) (*SendGroupMessageResp, error)
	// 获取群聊记录
	GetGroupHistory(context.Context, *GetGroupHistoryReq) (*GetGroupHistoryResp, error)
	mustEmbedUnimplementedGroupServer()
}

// UnimplementedGroupServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServer struct {
}

func (UnimplementedGroupServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupServer) GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedGroupServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupServer) DissolveGroup(context.Context, *DissolveGroupReq) (*DissolveGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DissolveGroup not implemented")
}
func (UnimplementedGroupServer) InviteUsers(context.Context, *InviteUsersReq) (*InviteUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUsers not implemented")
}
func (UnimplementedGroupServer) RemoveMembers(context.Context, *RemoveMembersReq) (*RemoveMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMembers not implemented")
}
func (UnimplementedGroupServer) LeaveGroup(context.Context, *LeaveGroupReq) (*LeaveGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedGroupServer) GetGroupMembers(context.Context, *GetGroupMembersReq) (*GetGroupMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembers not implemented")
}
func (UnimplementedGroupServer) SetMemberRole(context.Context, *SetMemberRoleReq) (*SetMemberRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMemberRole not implemented")
}
func (UnimplementedGroupServer) MuteMembers(context.Context, *MuteMembersReq) (*MuteMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteMembers not implemented")
}
func (UnimplementedGroupServer) GetUserGroups(context.Context, *GetUserGroupsReq) (*GetUserGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroups not implemented")
}
func (UnimplementedGroupServer) CheckMembership(context.Context, *CheckMembershipReq) (*CheckMembershipResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMembership not implemented")
}
func (UnimplementedGroupServer) SendGroupMessage(context.Context, *SendGroupMessageReq) (*SendGroupMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMessage not implemented")
}
func (UnimplementedGroupServer) GetGroupHistory(context.Context, *GetGroupHistoryReq) (*GetGroupHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupHistory not implemented")
}
func (UnimplementedGroupServer) mustEmbedUnimplementedGroupServer() {}

// UnsafeGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServer will
// result in compilation errors.
type UnsafeGroupServer interface {
	mustEmbedUnimplementedGroupServer()
}

func RegisterGroupServer(s grpc.ServiceRegistrar, srv GroupServer) {
	s.RegisterService(&Group_ServiceDesc, srv)
}

func _Group_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupInfo(ctx, req.(*GetGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DissolveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DissolveGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DissolveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_DissolveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DissolveGroup(ctx, req.(*DissolveGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_InviteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).InviteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_InviteUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).InviteUsers(ctx, req.(*InviteUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_RemoveMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).RemoveMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_RemoveMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).RemoveMembers(ctx, req.(*RemoveMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).LeaveGroup(ctx, req.(*LeaveGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMembers(ctx, req.(*GetGroupMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMemberRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_SetMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetMemberRole(ctx, req.(*SetMemberRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MuteMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MuteMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_MuteMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MuteMembers(ctx, req.(*MuteMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetUserGroups(ctx, req.(*GetUserGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CheckMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMembershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CheckMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_CheckMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CheckMembership(ctx, req.(*CheckMembershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SendGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SendGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_SendGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SendGroupMessage(ctx, req.(*SendGroupMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupHistory(ctx, req.(*GetGroupHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Group_ServiceDesc is the grpc.ServiceDesc for Group service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Group_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "group.Group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _Group_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroupInfo",
			Handler:    _Group_GetGroupInfo_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Group_UpdateGroup_Handler,
		},
		{
			MethodName: "DissolveGroup",
			Handler:    _Group_DissolveGroup_Handler,
		},
		{
			MethodName: "InviteUsers",
			Handler:    _Group_InviteUsers_Handler,
		},
		{
			MethodName: "RemoveMembers",
			Handler:    _Group_RemoveMembers_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _Group_LeaveGroup_Handler,
		},
		{
			MethodName: "GetGroupMembers",
			Handler:    _Group_GetGroupMembers_Handler,
		},
		{
			MethodName: "SetMemberRole",
			Handler:    _Group_SetMemberRole_Handler,
		},
		{
			MethodName: "MuteMembers",
			Handler:    _Group_MuteMembers_Handler,
		},
		{
			MethodName: "GetUserGroups",
			Handler:    _Group_GetUserGroups_Handler,
		},
		{
			MethodName: "CheckMembership",
			Handler:    _Group_CheckMembership_Handler,
		},
		{
			MethodName: "SendGroupMessage",
			Handler:    _Group_SendGroupMessage_Handler,
		},
		{
			MethodName: "GetGroupHistory",
			Handler:    _Group_GetGroupHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/group.proto",
}
