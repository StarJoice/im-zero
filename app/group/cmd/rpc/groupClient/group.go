// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: group.proto

package groupClient

import (
	"context"

	"im-zero/app/group/cmd/rpc/group"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckMembershipReq   = group.CheckMembershipReq
	CheckMembershipResp  = group.CheckMembershipResp
	CreateGroupReq       = group.CreateGroupReq
	CreateGroupResp      = group.CreateGroupResp
	DissolveGroupReq     = group.DissolveGroupReq
	DissolveGroupResp    = group.DissolveGroupResp
	GetGroupHistoryReq   = group.GetGroupHistoryReq
	GetGroupHistoryResp  = group.GetGroupHistoryResp
	GetGroupInfoReq      = group.GetGroupInfoReq
	GetGroupInfoResp     = group.GetGroupInfoResp
	GetGroupMembersReq   = group.GetGroupMembersReq
	GetGroupMembersResp  = group.GetGroupMembersResp
	GetUserGroupsReq     = group.GetUserGroupsReq
	GetUserGroupsResp    = group.GetUserGroupsResp
	GroupInfo            = group.GroupInfo
	GroupMemberInfo      = group.GroupMemberInfo
	GroupMessageInfo     = group.GroupMessageInfo
	InviteUsersReq       = group.InviteUsersReq
	InviteUsersResp      = group.InviteUsersResp
	LeaveGroupReq        = group.LeaveGroupReq
	LeaveGroupResp       = group.LeaveGroupResp
	MuteMembersReq       = group.MuteMembersReq
	MuteMembersResp      = group.MuteMembersResp
	RemoveMembersReq     = group.RemoveMembersReq
	RemoveMembersResp    = group.RemoveMembersResp
	SendGroupMessageReq  = group.SendGroupMessageReq
	SendGroupMessageResp = group.SendGroupMessageResp
	SetMemberRoleReq     = group.SetMemberRoleReq
	SetMemberRoleResp    = group.SetMemberRoleResp
	UpdateGroupReq       = group.UpdateGroupReq
	UpdateGroupResp      = group.UpdateGroupResp

	Group interface {
		// 创建群组
		CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
		// 获取群组信息
		GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error)
		// 更新群组信息
		UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
		// 解散群组
		DissolveGroup(ctx context.Context, in *DissolveGroupReq, opts ...grpc.CallOption) (*DissolveGroupResp, error)
		// 邀请用户入群
		InviteUsers(ctx context.Context, in *InviteUsersReq, opts ...grpc.CallOption) (*InviteUsersResp, error)
		// 移除群成员
		RemoveMembers(ctx context.Context, in *RemoveMembersReq, opts ...grpc.CallOption) (*RemoveMembersResp, error)
		// 退出群组
		LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupResp, error)
		// 获取群成员列表
		GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error)
		// 设置成员角色
		SetMemberRole(ctx context.Context, in *SetMemberRoleReq, opts ...grpc.CallOption) (*SetMemberRoleResp, error)
		// 禁言成员
		MuteMembers(ctx context.Context, in *MuteMembersReq, opts ...grpc.CallOption) (*MuteMembersResp, error)
		// 获取用户的群组列表
		GetUserGroups(ctx context.Context, in *GetUserGroupsReq, opts ...grpc.CallOption) (*GetUserGroupsResp, error)
		// 检查用户是否在群中
		CheckMembership(ctx context.Context, in *CheckMembershipReq, opts ...grpc.CallOption) (*CheckMembershipResp, error)
		// 发送群消息
		SendGroupMessage(ctx context.Context, in *SendGroupMessageReq, opts ...grpc.CallOption) (*SendGroupMessageResp, error)
		// 获取群聊记录
		GetGroupHistory(ctx context.Context, in *GetGroupHistoryReq, opts ...grpc.CallOption) (*GetGroupHistoryResp, error)
	}

	defaultGroup struct {
		cli zrpc.Client
	}
)

func NewGroup(cli zrpc.Client) Group {
	return &defaultGroup{
		cli: cli,
	}
}

// 创建群组
func (m *defaultGroup) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.CreateGroup(ctx, in, opts...)
}

// 获取群组信息
func (m *defaultGroup) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.GetGroupInfo(ctx, in, opts...)
}

// 更新群组信息
func (m *defaultGroup) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.UpdateGroup(ctx, in, opts...)
}

// 解散群组
func (m *defaultGroup) DissolveGroup(ctx context.Context, in *DissolveGroupReq, opts ...grpc.CallOption) (*DissolveGroupResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.DissolveGroup(ctx, in, opts...)
}

// 邀请用户入群
func (m *defaultGroup) InviteUsers(ctx context.Context, in *InviteUsersReq, opts ...grpc.CallOption) (*InviteUsersResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.InviteUsers(ctx, in, opts...)
}

// 移除群成员
func (m *defaultGroup) RemoveMembers(ctx context.Context, in *RemoveMembersReq, opts ...grpc.CallOption) (*RemoveMembersResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.RemoveMembers(ctx, in, opts...)
}

// 退出群组
func (m *defaultGroup) LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.LeaveGroup(ctx, in, opts...)
}

// 获取群成员列表
func (m *defaultGroup) GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.GetGroupMembers(ctx, in, opts...)
}

// 设置成员角色
func (m *defaultGroup) SetMemberRole(ctx context.Context, in *SetMemberRoleReq, opts ...grpc.CallOption) (*SetMemberRoleResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.SetMemberRole(ctx, in, opts...)
}

// 禁言成员
func (m *defaultGroup) MuteMembers(ctx context.Context, in *MuteMembersReq, opts ...grpc.CallOption) (*MuteMembersResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.MuteMembers(ctx, in, opts...)
}

// 获取用户的群组列表
func (m *defaultGroup) GetUserGroups(ctx context.Context, in *GetUserGroupsReq, opts ...grpc.CallOption) (*GetUserGroupsResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.GetUserGroups(ctx, in, opts...)
}

// 检查用户是否在群中
func (m *defaultGroup) CheckMembership(ctx context.Context, in *CheckMembershipReq, opts ...grpc.CallOption) (*CheckMembershipResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.CheckMembership(ctx, in, opts...)
}

// 发送群消息
func (m *defaultGroup) SendGroupMessage(ctx context.Context, in *SendGroupMessageReq, opts ...grpc.CallOption) (*SendGroupMessageResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.SendGroupMessage(ctx, in, opts...)
}

// 获取群聊记录
func (m *defaultGroup) GetGroupHistory(ctx context.Context, in *GetGroupHistoryReq, opts ...grpc.CallOption) (*GetGroupHistoryResp, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.GetGroupHistory(ctx, in, opts...)
}
