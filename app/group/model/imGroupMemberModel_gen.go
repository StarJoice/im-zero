// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"time"

	"github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"im-zero/pkg/globalkey"
)

var (
	imGroupMemberFieldNames          = builder.RawFieldNames(&ImGroupMember{})
	imGroupMemberRows                = strings.Join(imGroupMemberFieldNames, ",")
	imGroupMemberRowsExpectAutoSet   = strings.Join(stringx.Remove(imGroupMemberFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	imGroupMemberRowsWithPlaceHolder = strings.Join(stringx.Remove(imGroupMemberFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheImMessageImGroupMemberIdPrefix            = "cache:imMessage:imGroupMember:id:"
	cacheImMessageImGroupMemberGroupIdUserIdPrefix = "cache:imMessage:imGroupMember:groupId:userId:"
)

type (
	imGroupMemberModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *ImGroupMember) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ImGroupMember, error)
		FindOneByGroupIdUserId(ctx context.Context, groupId int64, userId int64) (*ImGroupMember, error)
		Update(ctx context.Context, session sqlx.Session, data *ImGroupMember) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *ImGroupMember) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, data *ImGroupMember) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*ImGroupMember, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*ImGroupMember, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*ImGroupMember, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*ImGroupMember, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*ImGroupMember, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultImGroupMemberModel struct {
		sqlc.CachedConn
		table string
	}

	ImGroupMember struct {
		Id          int64          `db:"id"`            // ID
		GroupId     int64          `db:"group_id"`      // 群组ID
		UserId      int64          `db:"user_id"`       // 用户ID
		Nickname    sql.NullString `db:"nickname"`      // 群内昵称
		Avatar      sql.NullString `db:"avatar"`        // 群内头像
		Role        int64          `db:"role"`          // 成员角色：1-普通成员，2-管理员，3-群主
		Status      int64          `db:"status"`        // 成员状态：0-已退出，1-正常，2-被踢出
		MuteEndTime sql.NullTime   `db:"mute_end_time"` // 禁言结束时间
		JoinTime    time.Time      `db:"join_time"`     // 入群时间
		JoinSource  int64          `db:"join_source"`   // 入群方式：1-邀请，2-扫码，3-搜索
		InviterId   sql.NullInt64  `db:"inviter_id"`    // 邀请人ID
		DelState    int64          `db:"del_state"`     // 删除状态：0-未删除，1-已删除
		DeleteTime  sql.NullTime   `db:"delete_time"`   // 删除时间
		CreateTime  time.Time      `db:"create_time"`   // 创建时间
		UpdateTime  time.Time      `db:"update_time"`   // 更新时间
		Version     int64          `db:"version"`       // 版本号
	}
)

func newImGroupMemberModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultImGroupMemberModel {
	return &defaultImGroupMemberModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`im_group_member`",
	}
}

func (m *defaultImGroupMemberModel) Insert(ctx context.Context, session sqlx.Session, data *ImGroupMember) (sql.Result, error) {
	data.DeleteTime = sql.NullTime{Time: time.Unix(0, 0), Valid: false}
	data.DelState = globalkey.DelStateNo
	imMessageImGroupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheImMessageImGroupMemberGroupIdUserIdPrefix, data.GroupId, data.UserId)
	imMessageImGroupMemberIdKey := fmt.Sprintf("%s%v", cacheImMessageImGroupMemberIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, imGroupMemberRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.GroupId, data.UserId, data.Nickname, data.Avatar, data.Role, data.Status, data.MuteEndTime, data.JoinTime, data.JoinSource, data.InviterId, data.DelState, data.DeleteTime, data.Version)
		}
		return conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.Nickname, data.Avatar, data.Role, data.Status, data.MuteEndTime, data.JoinTime, data.JoinSource, data.InviterId, data.DelState, data.DeleteTime, data.Version)
	}, imMessageImGroupMemberGroupIdUserIdKey, imMessageImGroupMemberIdKey)
}

func (m *defaultImGroupMemberModel) FindOne(ctx context.Context, id int64) (*ImGroupMember, error) {
	imMessageImGroupMemberIdKey := fmt.Sprintf("%s%v", cacheImMessageImGroupMemberIdPrefix, id)
	var resp ImGroupMember
	err := m.QueryRowCtx(ctx, &resp, imMessageImGroupMemberIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", imGroupMemberRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImGroupMemberModel) FindOneByGroupIdUserId(ctx context.Context, groupId int64, userId int64) (*ImGroupMember, error) {
	imMessageImGroupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheImMessageImGroupMemberGroupIdUserIdPrefix, groupId, userId)
	var resp ImGroupMember
	err := m.QueryRowIndexCtx(ctx, &resp, imMessageImGroupMemberGroupIdUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? and `user_id` = ? and del_state = ? limit 1", imGroupMemberRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, groupId, userId, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImGroupMemberModel) Update(ctx context.Context, session sqlx.Session, newData *ImGroupMember) (sql.Result, error) {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return nil, err
	}
	imMessageImGroupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheImMessageImGroupMemberGroupIdUserIdPrefix, data.GroupId, data.UserId)
	imMessageImGroupMemberIdKey := fmt.Sprintf("%s%v", cacheImMessageImGroupMemberIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, imGroupMemberRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, newData.GroupId, newData.UserId, newData.Nickname, newData.Avatar, newData.Role, newData.Status, newData.MuteEndTime, newData.JoinTime, newData.JoinSource, newData.InviterId, newData.DelState, newData.DeleteTime, newData.Version, newData.Id)
		}
		return conn.ExecCtx(ctx, query, newData.GroupId, newData.UserId, newData.Nickname, newData.Avatar, newData.Role, newData.Status, newData.MuteEndTime, newData.JoinTime, newData.JoinSource, newData.InviterId, newData.DelState, newData.DeleteTime, newData.Version, newData.Id)
	}, imMessageImGroupMemberGroupIdUserIdKey, imMessageImGroupMemberIdKey)
}

func (m *defaultImGroupMemberModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, newData *ImGroupMember) error {

	oldVersion := newData.Version
	newData.Version += 1

	var sqlResult sql.Result
	var err error

	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	imMessageImGroupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheImMessageImGroupMemberGroupIdUserIdPrefix, data.GroupId, data.UserId)
	imMessageImGroupMemberIdKey := fmt.Sprintf("%s%v", cacheImMessageImGroupMemberIdPrefix, data.Id)
	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, imGroupMemberRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, newData.GroupId, newData.UserId, newData.Nickname, newData.Avatar, newData.Role, newData.Status, newData.MuteEndTime, newData.JoinTime, newData.JoinSource, newData.InviterId, newData.DelState, newData.DeleteTime, newData.Version, newData.Id, oldVersion)
		}
		return conn.ExecCtx(ctx, query, newData.GroupId, newData.UserId, newData.Nickname, newData.Avatar, newData.Role, newData.Status, newData.MuteEndTime, newData.JoinTime, newData.JoinSource, newData.InviterId, newData.DelState, newData.DeleteTime, newData.Version, newData.Id, oldVersion)
	}, imMessageImGroupMemberGroupIdUserIdKey, imMessageImGroupMemberIdKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return ErrNoRowsUpdate
	}

	return nil
}

func (m *defaultImGroupMemberModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *ImGroupMember) error {
	data.DelState = globalkey.DelStateYes
	data.DeleteTime = sql.NullTime{Time: time.Now(), Valid: true}
	if err := m.UpdateWithVersion(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), "ImGroupMemberModel delete err : %+v", err)
	}
	return nil
}

func (m *defaultImGroupMemberModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultImGroupMemberModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultImGroupMemberModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*ImGroupMember, error) {

	builder = builder.Columns(imGroupMemberRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*ImGroupMember
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultImGroupMemberModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*ImGroupMember, error) {

	builder = builder.Columns(imGroupMemberRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*ImGroupMember
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultImGroupMemberModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*ImGroupMember, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(imGroupMemberRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*ImGroupMember
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultImGroupMemberModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*ImGroupMember, error) {

	builder = builder.Columns(imGroupMemberRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*ImGroupMember
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultImGroupMemberModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*ImGroupMember, error) {

	builder = builder.Columns(imGroupMemberRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*ImGroupMember
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultImGroupMemberModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultImGroupMemberModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}
func (m *defaultImGroupMemberModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	imMessageImGroupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheImMessageImGroupMemberGroupIdUserIdPrefix, data.GroupId, data.UserId)
	imMessageImGroupMemberIdKey := fmt.Sprintf("%s%v", cacheImMessageImGroupMemberIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, imMessageImGroupMemberGroupIdUserIdKey, imMessageImGroupMemberIdKey)
	return err
}
func (m *defaultImGroupMemberModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheImMessageImGroupMemberIdPrefix, primary)
}
func (m *defaultImGroupMemberModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", imGroupMemberRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultImGroupMemberModel) tableName() string {
	return m.table
}
