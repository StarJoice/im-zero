// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

type BlockUserReq struct {
	UserId int64  `json:"userId"`
	Reason string `json:"reason,optional"`
}

type BlockUserResp struct {
	Success bool `json:"success"`
}

type DeleteFriendReq struct {
	FriendUserId int64 `json:"friendUserId"`
}

type DeleteFriendResp struct {
	Success bool `json:"success"`
}

type GetBlockListReq struct {
	Page  int32 `json:"page,optional,range=[1:]"`
	Limit int32 `json:"limit,optional,range=[1:50]"`
}

type GetBlockListResp struct {
	BlockUsers []UserInfo `json:"blockUsers"`
	Total      int32      `json:"total"`
}

type GetFriendListReq struct {
	GroupId int64 `json:"groupId,optional"` // 好友分组ID，不传获取所有
}

type GetFriendListResp struct {
	Friends []FriendInfo `json:"friends"`
	Total   int32        `json:"total"`
}

type GetFriendRequestsReq struct {
	Type  int32 `json:"type"` // 1:我发送的 2:我收到的
	Page  int32 `json:"page,optional,range=[1:]"`
	Limit int32 `json:"limit,optional,range=[1:50]"`
}

type GetFriendRequestsResp struct {
	Requests []FriendRequest `json:"requests"`
	Total    int32           `json:"total"`
}

type HandleFriendRequestReq struct {
	RequestId int64  `json:"requestId"`
	Action    int32  `json:"action"`          // 1:同意 2:拒绝
	Remark    string `json:"remark,optional"` // 备注名(同意时使用)
}

type HandleFriendRequestResp struct {
	Success bool `json:"success"`
}

type SearchUsersReq struct {
	Keyword string `json:"keyword"` // 搜索关键词(手机号/昵称)
	Page    int32  `json:"page,optional,range=[1:]"`
	Limit   int32  `json:"limit,optional,range=[1:20]"`
}

type SearchUsersResp struct {
	Users []UserInfo `json:"users"`
	Total int32      `json:"total"`
}

type SendFriendRequestReq struct {
	ToUserId int64  `json:"toUserId"`
	Message  string `json:"message,optional"` // 验证消息
}

type SendFriendRequestResp struct {
	RequestId int64 `json:"requestId"`
}

type UnblockUserReq struct {
	UserId int64 `json:"userId"`
}

type UnblockUserResp struct {
	Success bool `json:"success"`
}
