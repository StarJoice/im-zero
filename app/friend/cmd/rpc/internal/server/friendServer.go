// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: friend.proto

package server

import (
	"context"

	"im-zero/app/friend/cmd/rpc/friend"
	"im-zero/app/friend/cmd/rpc/internal/logic"
	"im-zero/app/friend/cmd/rpc/internal/svc"
)

type FriendServer struct {
	svcCtx *svc.ServiceContext
	friend.UnimplementedFriendServer
}

func NewFriendServer(svcCtx *svc.ServiceContext) *FriendServer {
	return &FriendServer{
		svcCtx: svcCtx,
	}
}

// 发送好友请求
func (s *FriendServer) SendFriendRequest(ctx context.Context, in *friend.SendFriendRequestReq) (*friend.SendFriendRequestResp, error) {
	l := logic.NewSendFriendRequestLogic(ctx, s.svcCtx)
	return l.SendFriendRequest(in)
}

// 处理好友请求
func (s *FriendServer) HandleFriendRequest(ctx context.Context, in *friend.HandleFriendRequestReq) (*friend.HandleFriendRequestResp, error) {
	l := logic.NewHandleFriendRequestLogic(ctx, s.svcCtx)
	return l.HandleFriendRequest(in)
}

// 获取好友请求列表
func (s *FriendServer) GetFriendRequests(ctx context.Context, in *friend.GetFriendRequestsReq) (*friend.GetFriendRequestsResp, error) {
	l := logic.NewGetFriendRequestsLogic(ctx, s.svcCtx)
	return l.GetFriendRequests(in)
}

// 获取好友列表
func (s *FriendServer) GetFriendList(ctx context.Context, in *friend.GetFriendListReq) (*friend.GetFriendListResp, error) {
	l := logic.NewGetFriendListLogic(ctx, s.svcCtx)
	return l.GetFriendList(in)
}

// 删除好友
func (s *FriendServer) DeleteFriend(ctx context.Context, in *friend.DeleteFriendReq) (*friend.DeleteFriendResp, error) {
	l := logic.NewDeleteFriendLogic(ctx, s.svcCtx)
	return l.DeleteFriend(in)
}

// 检查好友关系
func (s *FriendServer) CheckFriendship(ctx context.Context, in *friend.CheckFriendshipReq) (*friend.CheckFriendshipResp, error) {
	l := logic.NewCheckFriendshipLogic(ctx, s.svcCtx)
	return l.CheckFriendship(in)
}

// 拉黑用户
func (s *FriendServer) BlockUser(ctx context.Context, in *friend.BlockUserReq) (*friend.BlockUserResp, error) {
	l := logic.NewBlockUserLogic(ctx, s.svcCtx)
	return l.BlockUser(in)
}

// 取消拉黑
func (s *FriendServer) UnblockUser(ctx context.Context, in *friend.UnblockUserReq) (*friend.UnblockUserResp, error) {
	l := logic.NewUnblockUserLogic(ctx, s.svcCtx)
	return l.UnblockUser(in)
}

// 获取黑名单
func (s *FriendServer) GetBlockList(ctx context.Context, in *friend.GetBlockListReq) (*friend.GetBlockListResp, error) {
	l := logic.NewGetBlockListLogic(ctx, s.svcCtx)
	return l.GetBlockList(in)
}

// 检查是否被拉黑
func (s *FriendServer) CheckBlocked(ctx context.Context, in *friend.CheckBlockedReq) (*friend.CheckBlockedResp, error) {
	l := logic.NewCheckBlockedLogic(ctx, s.svcCtx)
	return l.CheckBlocked(in)
}

// 搜索用户
func (s *FriendServer) SearchUsers(ctx context.Context, in *friend.SearchUsersReq) (*friend.SearchUsersResp, error) {
	l := logic.NewSearchUsersLogic(ctx, s.svcCtx)
	return l.SearchUsers(in)
}
