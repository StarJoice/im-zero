// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: pb/friend.proto

package friend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Friend_SendFriendRequest_FullMethodName   = "/friend.Friend/SendFriendRequest"
	Friend_HandleFriendRequest_FullMethodName = "/friend.Friend/HandleFriendRequest"
	Friend_GetFriendRequests_FullMethodName   = "/friend.Friend/GetFriendRequests"
	Friend_GetFriendList_FullMethodName       = "/friend.Friend/GetFriendList"
	Friend_DeleteFriend_FullMethodName        = "/friend.Friend/DeleteFriend"
	Friend_CheckFriendship_FullMethodName     = "/friend.Friend/CheckFriendship"
	Friend_BlockUser_FullMethodName           = "/friend.Friend/BlockUser"
	Friend_UnblockUser_FullMethodName         = "/friend.Friend/UnblockUser"
	Friend_GetBlockList_FullMethodName        = "/friend.Friend/GetBlockList"
	Friend_CheckBlocked_FullMethodName        = "/friend.Friend/CheckBlocked"
	Friend_SearchUsers_FullMethodName         = "/friend.Friend/SearchUsers"
)

// FriendClient is the client API for Friend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 好友服务定义
type FriendClient interface {
	// 发送好友请求
	SendFriendRequest(ctx context.Context, in *SendFriendRequestReq, opts ...grpc.CallOption) (*SendFriendRequestResp, error)
	// 处理好友请求
	HandleFriendRequest(ctx context.Context, in *HandleFriendRequestReq, opts ...grpc.CallOption) (*HandleFriendRequestResp, error)
	// 获取好友请求列表
	GetFriendRequests(ctx context.Context, in *GetFriendRequestsReq, opts ...grpc.CallOption) (*GetFriendRequestsResp, error)
	// 获取好友列表
	GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
	// 删除好友
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
	// 检查好友关系
	CheckFriendship(ctx context.Context, in *CheckFriendshipReq, opts ...grpc.CallOption) (*CheckFriendshipResp, error)
	// 拉黑用户
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
	// 取消拉黑
	UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error)
	// 获取黑名单
	GetBlockList(ctx context.Context, in *GetBlockListReq, opts ...grpc.CallOption) (*GetBlockListResp, error)
	// 检查是否被拉黑
	CheckBlocked(ctx context.Context, in *CheckBlockedReq, opts ...grpc.CallOption) (*CheckBlockedResp, error)
	// 搜索用户
	SearchUsers(ctx context.Context, in *SearchUsersReq, opts ...grpc.CallOption) (*SearchUsersResp, error)
}

type friendClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendClient(cc grpc.ClientConnInterface) FriendClient {
	return &friendClient{cc}
}

func (c *friendClient) SendFriendRequest(ctx context.Context, in *SendFriendRequestReq, opts ...grpc.CallOption) (*SendFriendRequestResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendFriendRequestResp)
	err := c.cc.Invoke(ctx, Friend_SendFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) HandleFriendRequest(ctx context.Context, in *HandleFriendRequestReq, opts ...grpc.CallOption) (*HandleFriendRequestResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleFriendRequestResp)
	err := c.cc.Invoke(ctx, Friend_HandleFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetFriendRequests(ctx context.Context, in *GetFriendRequestsReq, opts ...grpc.CallOption) (*GetFriendRequestsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendRequestsResp)
	err := c.cc.Invoke(ctx, Friend_GetFriendRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendListResp)
	err := c.cc.Invoke(ctx, Friend_GetFriendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFriendResp)
	err := c.cc.Invoke(ctx, Friend_DeleteFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) CheckFriendship(ctx context.Context, in *CheckFriendshipReq, opts ...grpc.CallOption) (*CheckFriendshipResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckFriendshipResp)
	err := c.cc.Invoke(ctx, Friend_CheckFriendship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockUserResp)
	err := c.cc.Invoke(ctx, Friend_BlockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnblockUserResp)
	err := c.cc.Invoke(ctx, Friend_UnblockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetBlockList(ctx context.Context, in *GetBlockListReq, opts ...grpc.CallOption) (*GetBlockListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockListResp)
	err := c.cc.Invoke(ctx, Friend_GetBlockList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) CheckBlocked(ctx context.Context, in *CheckBlockedReq, opts ...grpc.CallOption) (*CheckBlockedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckBlockedResp)
	err := c.cc.Invoke(ctx, Friend_CheckBlocked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) SearchUsers(ctx context.Context, in *SearchUsersReq, opts ...grpc.CallOption) (*SearchUsersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUsersResp)
	err := c.cc.Invoke(ctx, Friend_SearchUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServer is the server API for Friend service.
// All implementations must embed UnimplementedFriendServer
// for forward compatibility
//
// 好友服务定义
type FriendServer interface {
	// 发送好友请求
	SendFriendRequest(context.Context, *SendFriendRequestReq) (*SendFriendRequestResp, error)
	// 处理好友请求
	HandleFriendRequest(context.Context, *HandleFriendRequestReq) (*HandleFriendRequestResp, error)
	// 获取好友请求列表
	GetFriendRequests(context.Context, *GetFriendRequestsReq) (*GetFriendRequestsResp, error)
	// 获取好友列表
	GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error)
	// 删除好友
	DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error)
	// 检查好友关系
	CheckFriendship(context.Context, *CheckFriendshipReq) (*CheckFriendshipResp, error)
	// 拉黑用户
	BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error)
	// 取消拉黑
	UnblockUser(context.Context, *UnblockUserReq) (*UnblockUserResp, error)
	// 获取黑名单
	GetBlockList(context.Context, *GetBlockListReq) (*GetBlockListResp, error)
	// 检查是否被拉黑
	CheckBlocked(context.Context, *CheckBlockedReq) (*CheckBlockedResp, error)
	// 搜索用户
	SearchUsers(context.Context, *SearchUsersReq) (*SearchUsersResp, error)
	mustEmbedUnimplementedFriendServer()
}

// UnimplementedFriendServer must be embedded to have forward compatible implementations.
type UnimplementedFriendServer struct {
}

func (UnimplementedFriendServer) SendFriendRequest(context.Context, *SendFriendRequestReq) (*SendFriendRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendRequest not implemented")
}
func (UnimplementedFriendServer) HandleFriendRequest(context.Context, *HandleFriendRequestReq) (*HandleFriendRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFriendRequest not implemented")
}
func (UnimplementedFriendServer) GetFriendRequests(context.Context, *GetFriendRequestsReq) (*GetFriendRequestsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequests not implemented")
}
func (UnimplementedFriendServer) GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedFriendServer) DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedFriendServer) CheckFriendship(context.Context, *CheckFriendshipReq) (*CheckFriendshipResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFriendship not implemented")
}
func (UnimplementedFriendServer) BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedFriendServer) UnblockUser(context.Context, *UnblockUserReq) (*UnblockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (UnimplementedFriendServer) GetBlockList(context.Context, *GetBlockListReq) (*GetBlockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockList not implemented")
}
func (UnimplementedFriendServer) CheckBlocked(context.Context, *CheckBlockedReq) (*CheckBlockedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBlocked not implemented")
}
func (UnimplementedFriendServer) SearchUsers(context.Context, *SearchUsersReq) (*SearchUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedFriendServer) mustEmbedUnimplementedFriendServer() {}

// UnsafeFriendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServer will
// result in compilation errors.
type UnsafeFriendServer interface {
	mustEmbedUnimplementedFriendServer()
}

func RegisterFriendServer(s grpc.ServiceRegistrar, srv FriendServer) {
	s.RegisterService(&Friend_ServiceDesc, srv)
}

func _Friend_SendFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).SendFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_SendFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).SendFriendRequest(ctx, req.(*SendFriendRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_HandleFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleFriendRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).HandleFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_HandleFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).HandleFriendRequest(ctx, req.(*HandleFriendRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetFriendRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendRequestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetFriendRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendRequests(ctx, req.(*GetFriendRequestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendList(ctx, req.(*GetFriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_DeleteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_CheckFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFriendshipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).CheckFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_CheckFriendship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).CheckFriendship(ctx, req.(*CheckFriendshipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_BlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_UnblockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).UnblockUser(ctx, req.(*UnblockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetBlockList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetBlockList(ctx, req.(*GetBlockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_CheckBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).CheckBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_CheckBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).CheckBlocked(ctx, req.(*CheckBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).SearchUsers(ctx, req.(*SearchUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Friend_ServiceDesc is the grpc.ServiceDesc for Friend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Friend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friend.Friend",
	HandlerType: (*FriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFriendRequest",
			Handler:    _Friend_SendFriendRequest_Handler,
		},
		{
			MethodName: "HandleFriendRequest",
			Handler:    _Friend_HandleFriendRequest_Handler,
		},
		{
			MethodName: "GetFriendRequests",
			Handler:    _Friend_GetFriendRequests_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _Friend_GetFriendList_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _Friend_DeleteFriend_Handler,
		},
		{
			MethodName: "CheckFriendship",
			Handler:    _Friend_CheckFriendship_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _Friend_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _Friend_UnblockUser_Handler,
		},
		{
			MethodName: "GetBlockList",
			Handler:    _Friend_GetBlockList_Handler,
		},
		{
			MethodName: "CheckBlocked",
			Handler:    _Friend_CheckBlocked_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _Friend_SearchUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/friend.proto",
}
