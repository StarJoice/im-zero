// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: friend.proto

package friendClient

import (
	"context"

	"im-zero/app/friend/cmd/rpc/friend"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BlockUserReq            = friend.BlockUserReq
	BlockUserResp           = friend.BlockUserResp
	CheckBlockedReq         = friend.CheckBlockedReq
	CheckBlockedResp        = friend.CheckBlockedResp
	CheckFriendshipReq      = friend.CheckFriendshipReq
	CheckFriendshipResp     = friend.CheckFriendshipResp
	DeleteFriendReq         = friend.DeleteFriendReq
	DeleteFriendResp        = friend.DeleteFriendResp
	FriendInfo              = friend.FriendInfo
	FriendRequestInfo       = friend.FriendRequestInfo
	GetBlockListReq         = friend.GetBlockListReq
	GetBlockListResp        = friend.GetBlockListResp
	GetFriendListReq        = friend.GetFriendListReq
	GetFriendListResp       = friend.GetFriendListResp
	GetFriendRequestsReq    = friend.GetFriendRequestsReq
	GetFriendRequestsResp   = friend.GetFriendRequestsResp
	HandleFriendRequestReq  = friend.HandleFriendRequestReq
	HandleFriendRequestResp = friend.HandleFriendRequestResp
	SearchUsersReq          = friend.SearchUsersReq
	SearchUsersResp         = friend.SearchUsersResp
	SendFriendRequestReq    = friend.SendFriendRequestReq
	SendFriendRequestResp   = friend.SendFriendRequestResp
	UnblockUserReq          = friend.UnblockUserReq
	UnblockUserResp         = friend.UnblockUserResp
	UserInfo                = friend.UserInfo

	Friend interface {
		// 发送好友请求
		SendFriendRequest(ctx context.Context, in *SendFriendRequestReq, opts ...grpc.CallOption) (*SendFriendRequestResp, error)
		// 处理好友请求
		HandleFriendRequest(ctx context.Context, in *HandleFriendRequestReq, opts ...grpc.CallOption) (*HandleFriendRequestResp, error)
		// 获取好友请求列表
		GetFriendRequests(ctx context.Context, in *GetFriendRequestsReq, opts ...grpc.CallOption) (*GetFriendRequestsResp, error)
		// 获取好友列表
		GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
		// 删除好友
		DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
		// 检查好友关系
		CheckFriendship(ctx context.Context, in *CheckFriendshipReq, opts ...grpc.CallOption) (*CheckFriendshipResp, error)
		// 拉黑用户
		BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
		// 取消拉黑
		UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error)
		// 获取黑名单
		GetBlockList(ctx context.Context, in *GetBlockListReq, opts ...grpc.CallOption) (*GetBlockListResp, error)
		// 检查是否被拉黑
		CheckBlocked(ctx context.Context, in *CheckBlockedReq, opts ...grpc.CallOption) (*CheckBlockedResp, error)
		// 搜索用户
		SearchUsers(ctx context.Context, in *SearchUsersReq, opts ...grpc.CallOption) (*SearchUsersResp, error)
	}

	defaultFriend struct {
		cli zrpc.Client
	}
)

func NewFriend(cli zrpc.Client) Friend {
	return &defaultFriend{
		cli: cli,
	}
}

// 发送好友请求
func (m *defaultFriend) SendFriendRequest(ctx context.Context, in *SendFriendRequestReq, opts ...grpc.CallOption) (*SendFriendRequestResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.SendFriendRequest(ctx, in, opts...)
}

// 处理好友请求
func (m *defaultFriend) HandleFriendRequest(ctx context.Context, in *HandleFriendRequestReq, opts ...grpc.CallOption) (*HandleFriendRequestResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.HandleFriendRequest(ctx, in, opts...)
}

// 获取好友请求列表
func (m *defaultFriend) GetFriendRequests(ctx context.Context, in *GetFriendRequestsReq, opts ...grpc.CallOption) (*GetFriendRequestsResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.GetFriendRequests(ctx, in, opts...)
}

// 获取好友列表
func (m *defaultFriend) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.GetFriendList(ctx, in, opts...)
}

// 删除好友
func (m *defaultFriend) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.DeleteFriend(ctx, in, opts...)
}

// 检查好友关系
func (m *defaultFriend) CheckFriendship(ctx context.Context, in *CheckFriendshipReq, opts ...grpc.CallOption) (*CheckFriendshipResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.CheckFriendship(ctx, in, opts...)
}

// 拉黑用户
func (m *defaultFriend) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.BlockUser(ctx, in, opts...)
}

// 取消拉黑
func (m *defaultFriend) UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.UnblockUser(ctx, in, opts...)
}

// 获取黑名单
func (m *defaultFriend) GetBlockList(ctx context.Context, in *GetBlockListReq, opts ...grpc.CallOption) (*GetBlockListResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.GetBlockList(ctx, in, opts...)
}

// 检查是否被拉黑
func (m *defaultFriend) CheckBlocked(ctx context.Context, in *CheckBlockedReq, opts ...grpc.CallOption) (*CheckBlockedResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.CheckBlocked(ctx, in, opts...)
}

// 搜索用户
func (m *defaultFriend) SearchUsers(ctx context.Context, in *SearchUsersReq, opts ...grpc.CallOption) (*SearchUsersResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.SearchUsers(ctx, in, opts...)
}
