// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"time"

	"github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"im-zero/pkg/globalkey"
)

var (
	imFriendFieldNames          = builder.RawFieldNames(&ImFriend{})
	imFriendRows                = strings.Join(imFriendFieldNames, ",")
	imFriendRowsExpectAutoSet   = strings.Join(stringx.Remove(imFriendFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	imFriendRowsWithPlaceHolder = strings.Join(stringx.Remove(imFriendFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheImMessageImFriendIdPrefix             = "cache:imMessage:imFriend:id:"
	cacheImMessageImFriendUserIdFriendIdPrefix = "cache:imMessage:imFriend:userId:friendId:"
)

type (
	imFriendModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *ImFriend) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ImFriend, error)
		FindOneByUserIdFriendId(ctx context.Context, userId int64, friendId int64) (*ImFriend, error)
		Update(ctx context.Context, session sqlx.Session, data *ImFriend) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *ImFriend) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, data *ImFriend) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*ImFriend, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*ImFriend, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*ImFriend, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*ImFriend, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*ImFriend, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultImFriendModel struct {
		sqlc.CachedConn
		table string
	}

	ImFriend struct {
		Id         int64          `db:"id"`          // ID
		UserId     int64          `db:"user_id"`     // 用户ID
		FriendId   int64          `db:"friend_id"`   // 好友ID
		Remark     sql.NullString `db:"remark"`      // 好友备注
		Status     int64          `db:"status"`      // 好友状态：1-正常，2-已拉黑
		IsTop      int64          `db:"is_top"`      // 是否置顶：0-否，1-是
		DelState   int64          `db:"del_state"`   // 删除状态：0-未删除，1-已删除
		DeleteTime sql.NullTime   `db:"delete_time"` // 删除时间
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
		Version    int64          `db:"version"`     // 版本号
	}
)

func newImFriendModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultImFriendModel {
	return &defaultImFriendModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`im_friend`",
	}
}

func (m *defaultImFriendModel) Insert(ctx context.Context, session sqlx.Session, data *ImFriend) (sql.Result, error) {
	data.DeleteTime = sql.NullTime{Time: time.Unix(0, 0), Valid: false}
	data.DelState = globalkey.DelStateNo
	imMessageImFriendIdKey := fmt.Sprintf("%s%v", cacheImMessageImFriendIdPrefix, data.Id)
	imMessageImFriendUserIdFriendIdKey := fmt.Sprintf("%s%v:%v", cacheImMessageImFriendUserIdFriendIdPrefix, data.UserId, data.FriendId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, imFriendRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.FriendId, data.Remark, data.Status, data.IsTop, data.DelState, data.DeleteTime, data.Version)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.FriendId, data.Remark, data.Status, data.IsTop, data.DelState, data.DeleteTime, data.Version)
	}, imMessageImFriendIdKey, imMessageImFriendUserIdFriendIdKey)
}

func (m *defaultImFriendModel) FindOne(ctx context.Context, id int64) (*ImFriend, error) {
	imMessageImFriendIdKey := fmt.Sprintf("%s%v", cacheImMessageImFriendIdPrefix, id)
	var resp ImFriend
	err := m.QueryRowCtx(ctx, &resp, imMessageImFriendIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", imFriendRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImFriendModel) FindOneByUserIdFriendId(ctx context.Context, userId int64, friendId int64) (*ImFriend, error) {
	imMessageImFriendUserIdFriendIdKey := fmt.Sprintf("%s%v:%v", cacheImMessageImFriendUserIdFriendIdPrefix, userId, friendId)
	var resp ImFriend
	err := m.QueryRowIndexCtx(ctx, &resp, imMessageImFriendUserIdFriendIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `friend_id` = ? and del_state = ? limit 1", imFriendRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, friendId, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImFriendModel) Update(ctx context.Context, session sqlx.Session, newData *ImFriend) (sql.Result, error) {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return nil, err
	}
	imMessageImFriendIdKey := fmt.Sprintf("%s%v", cacheImMessageImFriendIdPrefix, data.Id)
	imMessageImFriendUserIdFriendIdKey := fmt.Sprintf("%s%v:%v", cacheImMessageImFriendUserIdFriendIdPrefix, data.UserId, data.FriendId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, imFriendRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, newData.UserId, newData.FriendId, newData.Remark, newData.Status, newData.IsTop, newData.DelState, newData.DeleteTime, newData.Version, newData.Id)
		}
		return conn.ExecCtx(ctx, query, newData.UserId, newData.FriendId, newData.Remark, newData.Status, newData.IsTop, newData.DelState, newData.DeleteTime, newData.Version, newData.Id)
	}, imMessageImFriendIdKey, imMessageImFriendUserIdFriendIdKey)
}

func (m *defaultImFriendModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, newData *ImFriend) error {

	oldVersion := newData.Version
	newData.Version += 1

	var sqlResult sql.Result
	var err error

	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	imMessageImFriendIdKey := fmt.Sprintf("%s%v", cacheImMessageImFriendIdPrefix, data.Id)
	imMessageImFriendUserIdFriendIdKey := fmt.Sprintf("%s%v:%v", cacheImMessageImFriendUserIdFriendIdPrefix, data.UserId, data.FriendId)
	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, imFriendRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, newData.UserId, newData.FriendId, newData.Remark, newData.Status, newData.IsTop, newData.DelState, newData.DeleteTime, newData.Version, newData.Id, oldVersion)
		}
		return conn.ExecCtx(ctx, query, newData.UserId, newData.FriendId, newData.Remark, newData.Status, newData.IsTop, newData.DelState, newData.DeleteTime, newData.Version, newData.Id, oldVersion)
	}, imMessageImFriendIdKey, imMessageImFriendUserIdFriendIdKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return ErrNoRowsUpdate
	}

	return nil
}

func (m *defaultImFriendModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *ImFriend) error {
	data.DelState = globalkey.DelStateYes
	data.DeleteTime = sql.NullTime{Time: time.Now(), Valid: true}
	if err := m.UpdateWithVersion(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), "ImFriendModel delete err : %+v", err)
	}
	return nil
}

func (m *defaultImFriendModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultImFriendModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultImFriendModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*ImFriend, error) {

	builder = builder.Columns(imFriendRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*ImFriend
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultImFriendModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*ImFriend, error) {

	builder = builder.Columns(imFriendRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*ImFriend
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultImFriendModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*ImFriend, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(imFriendRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*ImFriend
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultImFriendModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*ImFriend, error) {

	builder = builder.Columns(imFriendRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*ImFriend
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultImFriendModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*ImFriend, error) {

	builder = builder.Columns(imFriendRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*ImFriend
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultImFriendModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultImFriendModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}
func (m *defaultImFriendModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	imMessageImFriendIdKey := fmt.Sprintf("%s%v", cacheImMessageImFriendIdPrefix, id)
	imMessageImFriendUserIdFriendIdKey := fmt.Sprintf("%s%v:%v", cacheImMessageImFriendUserIdFriendIdPrefix, data.UserId, data.FriendId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, imMessageImFriendIdKey, imMessageImFriendUserIdFriendIdKey)
	return err
}
func (m *defaultImFriendModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheImMessageImFriendIdPrefix, primary)
}
func (m *defaultImFriendModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", imFriendRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultImFriendModel) tableName() string {
	return m.table
}
