// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: verifycode.proto

package verifycode

import (
	"context"

	"im-zero/app/verifycode/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	SendSmsCodeReq    = pb.SendSmsCodeReq
	SendSmsCodeResp   = pb.SendSmsCodeResp
	VerifySmsCodeReq  = pb.VerifySmsCodeReq
	VerifySmsCodeResp = pb.VerifySmsCodeResp

	Verifycode interface {
		// 发送验证码
		SendSmsCode(ctx context.Context, in *SendSmsCodeReq, opts ...grpc.CallOption) (*SendSmsCodeResp, error)
		// 验证验证码
		VerifySmsCode(ctx context.Context, in *VerifySmsCodeReq, opts ...grpc.CallOption) (*VerifySmsCodeResp, error)
	}

	defaultVerifycode struct {
		cli zrpc.Client
	}
)

func NewVerifycode(cli zrpc.Client) Verifycode {
	return &defaultVerifycode{
		cli: cli,
	}
}

// 发送验证码
func (m *defaultVerifycode) SendSmsCode(ctx context.Context, in *SendSmsCodeReq, opts ...grpc.CallOption) (*SendSmsCodeResp, error) {
	client := pb.NewVerifycodeClient(m.cli.Conn())
	return client.SendSmsCode(ctx, in, opts...)
}

// 验证验证码
func (m *defaultVerifycode) VerifySmsCode(ctx context.Context, in *VerifySmsCodeReq, opts ...grpc.CallOption) (*VerifySmsCodeResp, error) {
	client := pb.NewVerifycodeClient(m.cli.Conn())
	return client.VerifySmsCode(ctx, in, opts...)
}
