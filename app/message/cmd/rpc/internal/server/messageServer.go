// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: message.proto

package server

import (
	"context"

	"im-zero/app/message/cmd/rpc/internal/logic"
	"im-zero/app/message/cmd/rpc/internal/svc"
	"im-zero/app/message/cmd/rpc/message"
)

type MessageServer struct {
	svcCtx *svc.ServiceContext
	message.UnimplementedMessageServer
}

func NewMessageServer(svcCtx *svc.ServiceContext) *MessageServer {
	return &MessageServer{
		svcCtx: svcCtx,
	}
}

// 发送消息
func (s *MessageServer) SendMessage(ctx context.Context, in *message.SendMessageReq) (*message.SendMessageResp, error) {
	l := logic.NewSendMessageLogic(ctx, s.svcCtx)
	return l.SendMessage(in)
}

// 获取聊天记录
func (s *MessageServer) GetChatHistory(ctx context.Context, in *message.GetChatHistoryReq) (*message.GetChatHistoryResp, error) {
	l := logic.NewGetChatHistoryLogic(ctx, s.svcCtx)
	return l.GetChatHistory(in)
}

// 获取对话列表
func (s *MessageServer) GetConversations(ctx context.Context, in *message.GetConversationsReq) (*message.GetConversationsResp, error) {
	l := logic.NewGetConversationsLogic(ctx, s.svcCtx)
	return l.GetConversations(in)
}

// 标记消息已读
func (s *MessageServer) MarkAsRead(ctx context.Context, in *message.MarkAsReadReq) (*message.MarkAsReadResp, error) {
	l := logic.NewMarkAsReadLogic(ctx, s.svcCtx)
	return l.MarkAsRead(in)
}

// 删除消息
func (s *MessageServer) DeleteMessage(ctx context.Context, in *message.DeleteMessageReq) (*message.DeleteMessageResp, error) {
	l := logic.NewDeleteMessageLogic(ctx, s.svcCtx)
	return l.DeleteMessage(in)
}

// 撤回消息
func (s *MessageServer) RecallMessage(ctx context.Context, in *message.RecallMessageReq) (*message.RecallMessageResp, error) {
	l := logic.NewRecallMessageLogic(ctx, s.svcCtx)
	return l.RecallMessage(in)
}

// 获取未读消息数
func (s *MessageServer) GetUnreadCount(ctx context.Context, in *message.GetUnreadCountReq) (*message.GetUnreadCountResp, error) {
	l := logic.NewGetUnreadCountLogic(ctx, s.svcCtx)
	return l.GetUnreadCount(in)
}

// 推送消息给用户
func (s *MessageServer) PushMessage(ctx context.Context, in *message.PushMessageReq) (*message.PushMessageResp, error) {
	l := logic.NewPushMessageLogic(ctx, s.svcCtx)
	return l.PushMessage(in)
}
