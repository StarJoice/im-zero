// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: message.proto

package messageClient

import (
	"context"

	"im-zero/app/message/cmd/rpc/message"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ConversationInfo     = message.ConversationInfo
	DeleteMessageReq     = message.DeleteMessageReq
	DeleteMessageResp    = message.DeleteMessageResp
	GetChatHistoryReq    = message.GetChatHistoryReq
	GetChatHistoryResp   = message.GetChatHistoryResp
	GetConversationsReq  = message.GetConversationsReq
	GetConversationsResp = message.GetConversationsResp
	GetUnreadCountReq    = message.GetUnreadCountReq
	GetUnreadCountResp   = message.GetUnreadCountResp
	MarkAsReadReq        = message.MarkAsReadReq
	MarkAsReadResp       = message.MarkAsReadResp
	MessageInfo          = message.MessageInfo
	PushMessageReq       = message.PushMessageReq
	PushMessageResp      = message.PushMessageResp
	RecallMessageReq     = message.RecallMessageReq
	RecallMessageResp    = message.RecallMessageResp
	SendMessageReq       = message.SendMessageReq
	SendMessageResp      = message.SendMessageResp

	Message interface {
		// 发送消息
		SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
		// 获取聊天记录
		GetChatHistory(ctx context.Context, in *GetChatHistoryReq, opts ...grpc.CallOption) (*GetChatHistoryResp, error)
		// 获取对话列表
		GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error)
		// 标记消息已读
		MarkAsRead(ctx context.Context, in *MarkAsReadReq, opts ...grpc.CallOption) (*MarkAsReadResp, error)
		// 删除消息
		DeleteMessage(ctx context.Context, in *DeleteMessageReq, opts ...grpc.CallOption) (*DeleteMessageResp, error)
		// 撤回消息
		RecallMessage(ctx context.Context, in *RecallMessageReq, opts ...grpc.CallOption) (*RecallMessageResp, error)
		// 获取未读消息数
		GetUnreadCount(ctx context.Context, in *GetUnreadCountReq, opts ...grpc.CallOption) (*GetUnreadCountResp, error)
		// 推送消息给用户
		PushMessage(ctx context.Context, in *PushMessageReq, opts ...grpc.CallOption) (*PushMessageResp, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

// 发送消息
func (m *defaultMessage) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.SendMessage(ctx, in, opts...)
}

// 获取聊天记录
func (m *defaultMessage) GetChatHistory(ctx context.Context, in *GetChatHistoryReq, opts ...grpc.CallOption) (*GetChatHistoryResp, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.GetChatHistory(ctx, in, opts...)
}

// 获取对话列表
func (m *defaultMessage) GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.GetConversations(ctx, in, opts...)
}

// 标记消息已读
func (m *defaultMessage) MarkAsRead(ctx context.Context, in *MarkAsReadReq, opts ...grpc.CallOption) (*MarkAsReadResp, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.MarkAsRead(ctx, in, opts...)
}

// 删除消息
func (m *defaultMessage) DeleteMessage(ctx context.Context, in *DeleteMessageReq, opts ...grpc.CallOption) (*DeleteMessageResp, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.DeleteMessage(ctx, in, opts...)
}

// 撤回消息
func (m *defaultMessage) RecallMessage(ctx context.Context, in *RecallMessageReq, opts ...grpc.CallOption) (*RecallMessageResp, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.RecallMessage(ctx, in, opts...)
}

// 获取未读消息数
func (m *defaultMessage) GetUnreadCount(ctx context.Context, in *GetUnreadCountReq, opts ...grpc.CallOption) (*GetUnreadCountResp, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.GetUnreadCount(ctx, in, opts...)
}

// 推送消息给用户
func (m *defaultMessage) PushMessage(ctx context.Context, in *PushMessageReq, opts ...grpc.CallOption) (*PushMessageResp, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.PushMessage(ctx, in, opts...)
}
