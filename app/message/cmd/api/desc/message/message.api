syntax = "v1"

info(
    title: "消息类型定义"
    desc: "即时消息相关数据结构"
    author: "StarJoice"
)

// 消息基础结构
type Message {
    Id int64 `json:"id"`
    FromUserId int64 `json:"fromUserId"`
    ToUserId int64 `json:"toUserId"`
    ConversationId string `json:"conversationId"`
    MessageType int32 `json:"messageType"` // 1:文本 2:图片 3:语音 4:视频 5:文件
    Content string `json:"content"`
    Extra string `json:"extra,optional"` // 扩展信息(JSON格式)
    Status int32 `json:"status"` // 0:发送中 1:已发送 2:已送达 3:已读 4:撤回 5:删除
    CreateTime int64 `json:"createTime"`
    UpdateTime int64 `json:"updateTime"`
}

// 对话信息
type Conversation {
    Id string `json:"id"`
    Type int32 `json:"type"` // 1:单聊 2:群聊
    Name string `json:"name,optional"`
    Avatar string `json:"avatar,optional"`
    LastMessage Message `json:"lastMessage"`
    UnreadCount int32 `json:"unreadCount"`
    UpdateTime int64 `json:"updateTime"`
}

// 发送消息请求
type (
    SendMessageReq {
        ToUserId int64 `json:"toUserId"`
        MessageType int32 `json:"messageType"`
        Content string `json:"content"`
        Extra string `json:"extra,optional"`
    }
    SendMessageResp {
        Message Message `json:"message"`
    }
)

// 获取聊天记录请求
type (
    GetChatHistoryReq {
        ConversationId string `json:"conversationId"`
        LastMessageId int64 `json:"lastMessageId,optional"` // 分页用，获取此ID之前的消息
        Limit int32 `json:"limit,optional,range=[1:100]"` // 默认20
    }
    GetChatHistoryResp {
        Messages []Message `json:"messages"`
        HasMore bool `json:"hasMore"`
    }
)

// 获取对话列表请求
type (
    GetConversationsReq {
        Page int32 `json:"page,optional,range=[1:]"` // 默认1
        Limit int32 `json:"limit,optional,range=[1:50]"` // 默认20
    }
    GetConversationsResp {
        Conversations []Conversation `json:"conversations"`
        Total int32 `json:"total"`
    }
)

// 标记已读请求
type (
    MarkAsReadReq {
        ConversationId string `json:"conversationId"`
        MessageId int64 `json:"messageId,optional"` // 标记到此消息为止都已读，不传则标记所有
    }
    MarkAsReadResp {
        Success bool `json:"success"`
    }
)

// 删除消息请求
type (
    DeleteMessageReq {
        MessageId int64 `json:"messageId"`
    }
    DeleteMessageResp {
        Success bool `json:"success"`
    }
)

// 撤回消息请求
type (
    RecallMessageReq {
        MessageId int64 `json:"messageId"`
    }
    RecallMessageResp {
        Success bool `json:"success"`
    }
)

// WebSocket连接请求
type (
    WsConnectReq {
        Token string `form:"token"` // JWT token
    }
)