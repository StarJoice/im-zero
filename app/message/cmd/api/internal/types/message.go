// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

type DeleteMessageReq struct {
	MessageId int64 `json:"messageId"`
}

type DeleteMessageResp struct {
	Success bool `json:"success"`
}

type GetChatHistoryReq struct {
	ConversationId string `json:"conversationId"`
	LastMessageId  int64  `json:"lastMessageId,optional"`       // 分页用，获取此ID之前的消息
	Limit          int32  `json:"limit,optional,range=[1:100]"` // 默认20
}

type GetChatHistoryResp struct {
	Messages []Message `json:"messages"`
	HasMore  bool      `json:"hasMore"`
}

type GetConversationsReq struct {
	Page  int32 `json:"page,optional,range=[1:]"`    // 默认1
	Limit int32 `json:"limit,optional,range=[1:50]"` // 默认20
}

type GetConversationsResp struct {
	Conversations []Conversation `json:"conversations"`
	Total         int32          `json:"total"`
}

type MarkAsReadReq struct {
	ConversationId string `json:"conversationId"`
	MessageId      int64  `json:"messageId,optional"` // 标记到此消息为止都已读，不传则标记所有
}

type MarkAsReadResp struct {
	Success bool `json:"success"`
}

type RecallMessageReq struct {
	MessageId int64 `json:"messageId"`
}

type RecallMessageResp struct {
	Success bool `json:"success"`
}

type SendMessageReq struct {
	ToUserId    int64  `json:"toUserId"`
	MessageType int32  `json:"messageType"`
	Content     string `json:"content"`
	Extra       string `json:"extra,optional"`
}

type SendMessageResp struct {
	Message Message `json:"message"`
}
